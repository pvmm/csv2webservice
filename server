#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from configparser import ConfigParser
from os import path
from os import environ


environ['APP_DIR'] = path.dirname(path.realpath(__file__))

if path.exists(path.join(environ['APP_DIR'], 'config/wsgi.cfg')):
    config = ConfigParser()
    config.read(path.join(environ['APP_DIR'], 'config/wsgi.cfg'))

    for key in config['env']:
        environ[key.upper()] = config['env'][key]


# Add working directory to path.
import sys
sys.path.insert(0, path.dirname(path.realpath(__file__)))


# Load virtual environment if available.
activate_this = path.join(environ['APP_DIR'], 'venv/bin/activate_this.py')
with open(activate_this) as file_:
    exec(file_.read(), dict(__file__=activate_this))


# Display help if running from command line.
if __name__ == '__main__':
    import click

    @click.group(help='Simple server to access imported CSV file.', invoke_without_command=True)
    @click.option('--help', is_flag=True, help='Select --help option after each command to display their specific settings.')
    @click.pass_context
    def entry_point(ctx, help):
        if ctx.invoked_subcommand is None or help:
            click.echo(click.get_current_context().get_help())
            sys.exit()


    @click.command(name='run', help='Run server in DEBUG mode.', add_help_option=True)
    def run_command():
        """Run web service in command line."""
        click.echo(' * Running server locally in DEBUG mode...')
        from app import create_app
        app = create_app(environ['APP_DIR'])
        host_ip = app.config['HOST_IP'] if 'HOST_IP' in app.config else None
        click.secho(' * Running server on IP address %s.' % host_ip)
        app.run(debug=True, host=host_ip)


    @click.command(name='import', help='Imports CSV file to database.', add_help_option=True)
    @click.option('--filename', type=click.File('r'), nargs=1, help='File to import.')
    @click.option('--delimiter', type=str, default=',', nargs=1, help='Delimiting character on CSV file (default=,).')
    @click.option('--pkindex', type=int, default=0, help='Set primary key field by field number (default=0).')
    @click.option('--pkname', type=str, help='Define primary key field by name.')
    @click.option('--clean', is_flag=True, help='Clean old data before importing.')
    def import_command(filename, delimiter, pkindex, pkname, clean):

        if clean:
            from db.functions import clean
            clean()

        from db.functions import dump
        dump(filename, delimiter=delimiter, pkindex=pkindex, pkname=pkname)
        sys.exit()


    @click.command(name='tests', help='Executes test collection from command line.', add_help_option=True)
    def tests_command():
        """Run test collection on the server."""
        click.echo(' * Starting server test modules...')
        import os
        import glob
        import unittest

        test_modules = glob.glob(path.join('tests', 'test_*.py'))
        test_suite = unittest.TestSuite()

        for file in test_modules:
            module_name = file.replace('.py', '').replace(os.sep, '.')
            print(' * Adding test module "%s"...' % module_name.replace('tests.', ''))
            mod = __import__(module_name, globals(), locals())
            test_suite.addTest(unittest.defaultTestLoader.loadTestsFromName(module_name))

        print(' * Running tests...')
        unittest.TextTestRunner().run(test_suite)
        print(' * Running tests done.')
        sys.exit()

    entry_point.add_command(run_command)
    entry_point.add_command(import_command)
    entry_point.add_command(tests_command)
    entry_point()

else:
    from app import create_app
    application = create_app(environ['APP_DIR'])
